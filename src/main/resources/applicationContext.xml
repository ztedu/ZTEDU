<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
">

  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="order" value="0"/>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
    <property name="locations">
      <list>
        <value>classpath:config.properties</value>
      </list>
    </property>
  </bean>
  <!--<context:property-placeholder location="classpath:config.properties"/>-->


  <!-- 第二种方式是使用注解的方式注入，主要用在java代码中使用注解注入properties文件中相应的value值 -->
  <!--<bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
  <!--<property name="locations">-->
  <!--<list>-->
  <!--<value>classpath:config.properties</value>-->
  <!--</list>-->
  <!--</property>-->
  <!--</bean>-->


  <!--引入Redis配置-->
  <!--<import resource="redis.xml"/>-->
  <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"/>

  <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton">
    <constructor-arg index="0" ref="jedisPoolConfig"/>
    <constructor-arg index="1">
      <list>
        <bean class="redis.clients.jedis.JedisShardInfo">
          <constructor-arg name="host" value="${redis.host}"/>
          <constructor-arg name="port" value="${redis.port}"/>
          <constructor-arg name="timeout" value="${redis.timeout}"/>
        </bean>
      </list>
    </constructor-arg>
  </bean>


  <!--引入Shiro配置-->
  <import resource="spring-shiro.xml"/>

  <!-- 配置数据源 -->
  <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="driverClassName" value="${db.driverClassName}"/>
    <property name="url" value="${db.url}"/>
    <property name="username" value="${db.username}"/>
    <property name="password" value="${db.password}"/>
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="5"/>
    <!-- 连接池最大使用连接数量 -->
    <property name="maxActive" value="100"/>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="0"/>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="60000"/>

    <property name="poolPreparedStatements" value="true"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="33"/>

    <property name="testOnBorrow" value="false"/>
    <property name="testOnReturn" value="false"/>
    <property name="testWhileIdle" value="true"/>

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="25200000"/>

    <!-- 打开 removeAbandoned 功能 -->
    <property name="removeAbandoned" value="true"/>
    <!-- 1800 秒，也就是 30 分钟 -->
    <property name="removeAbandonedTimeout" value="1800"/>
    <!-- 关闭 abanded 连接时输出错误日志 -->
    <property name="logAbandoned" value="true"/>

    <!-- 监控数据库 -->
    <!-- <property name="filters" value="stat" /> -->
    <property name="filters" value="mergeStat"/>
  </bean>


  <!-- mybatis文件配置，扫描所有mapper文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 配置Mybatis的全局配置文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!-- 数据源 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置mapper.xml文件 -->
    <property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
  </bean>

  <!-- mapper接口的扫描器 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="cn.everlook.myweb.persistence.dao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- tx事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  <tx:annotation-driven transaction-manager="transactionManager"/>

  <!-- druid -->
  <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
    <property name="slowSqlMillis" value="3000"/>
    <property name="logSlowSql" value="true"/>
    <property name="mergeSql" value="true"/>
  </bean>
  <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
    <property name="dbType" value="mysql"/>
  </bean>

</beans>
