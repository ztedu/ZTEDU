<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


  <mvc:annotation-driven/>
  <!-- 扫描的包 -->
  <context:component-scan base-package="cn.everlook.myweb.service"/>


  <!--rememberMeCookie：即记住我的Cookie，保存时长30天；-->
  <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    <constructor-arg value="rememberMe"/>
    <property name="httpOnly" value="true"/>
    <property name="maxAge" value="2592000"/><!-- 30天 -->
    <!--设置cookie的名字-->
    <property name="name" value="rememberMe"/>
  </bean>

  <!-- rememberMe管理器 -->
  <!--rememberMe管理器，cipherKey是加密rememberMe Cookie的密钥；默认AES算法；-->
  <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
    <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
    <property name="cipherKey"
              value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
    <property name="cookie" ref="rememberMeCookie"/>
  </bean>


  <!-- 安全管理器 -->
  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

    <property name="realm" ref="shiroRealm"/>

    <!--认证-->
    <property name="authenticator" ref="authenticator"/>

    <!--授权-->
    <property name="authorizer" ref="authorizer"/>

    <!--注入rememberMe cookie管理器-->
    <!--设置securityManager安全管理器的rememberMeManager； -->
    <property name="rememberMeManager" ref="rememberMeManager"/>

    <!--配置会话管理器-->
    <property name="sessionManager" ref="sessionManager"/>

    <!-- 将shiro的缓存管理器，注入到安全管理器中
    要想在Realm中将查询的数据放置到缓存中，
    需要在Realm之前创建动态代理对象，通过缓存代理控制Realm-->
    <!--设置securityManager安全管理器的cacheManager； -->
    <property name="cacheManager" ref="cacheManager"/>

  </bean>

  <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
    当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
  <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    <constructor-arg name="name" value="jeesite.session.id"/>
    <property name="httpOnly" value="true"/>
  </bean>

  <!--会话管理器-->
  <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    <!--单位是毫秒，设置session的失效时长，1s=1000μs-->
    <!--15天-->
    <property name="globalSessionTimeout" value="1296000000"/>
    <!--<property name="globalSessionTimeout" value="6000"/>-->
    <!--删除无效的session-->
    <property name="deleteInvalidSessions" value="true"/>
    <!--设置sessionDao-->
    <property name="sessionDAO" ref="sessionDAO"/>
    <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
    <property name="sessionValidationInterval" value="12000000"/>
    <!-- 是否定期检查Session的有效性 -->
    <property name="sessionValidationSchedulerEnabled" value="true"/>
    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
    <!--设置session的监听，监听消亡session的创建和-->
    <property name="sessionListeners" ref="sessionListener"/>
    <!--设置session的cookie属性-->
    <property name="sessionIdCookieEnabled" value="true"/>
    <property name="sessionIdCookie" ref="sessionIdCookie"/>
    <!--设置session的缓存管理器-->
    <property name="cacheManager" ref="cacheManager"/>
  </bean>

  <!-- 会话DAO -->
  <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
  </bean>

  <!-- 会话ID生成器 -->
  <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
  <bean id="kickoutSessionControlFilter" class="cn.everlook.myweb.commons.filter.shiro.KickoutSessionControlFilter">
    <property name="sessionManager" ref="sessionManager"/>
    <property name="cacheManager" ref="cacheManager"/>
    <!-- 后者登录踢出前者登录:比如同一个账号：A电脑登录后，接着在B电脑登录，这时A电脑操作时会跳转登录页面 -->
    <property name="kickoutAfter" value="false"/>
    <!-- 一个用户只能有1个登录在线 -->
    <property name="maxSession" value="1"/>
    <!-- 被踢出的跳转的url -->
    <property name="kickoutUrl" value="/login/toLogin.do?kickout=1"/>
  </bean>

  <!-- 会话验证调度器 -->
  <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">
    <property name="interval" value="1800000"/>
    <property name="sessionManager" ref="sessionManager"/>
  </bean>

  <bean id="sessionListener" class="cn.everlook.myweb.commons.filter.shiro.ShiroSessionListener"/>

  <!--认证器-->
  <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    <property name="realms">
      <list>
        <ref bean="shiroRealm"/>
      </list>
    </property>
    <!--认证策略-->
    <!--全部认证通过-->
    <property name="authenticationStrategy" ref="allSuccessfulStrategy"/>
  </bean>


  <!--认证策略-->
  <!--全部认证通过-->
  <bean id="allSuccessfulStrategy" class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>


  <!--授权器-->
  <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
    <property name="realms">
      <list>
        <ref bean="shiroRealm"/>
      </list>
    </property>
  </bean>

  <!-- 缓存管理器 使用Ehcache实现 -->
  <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
    <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
  </bean>


  <!-- 数据库保存的密码是使用SHA-256算法加密的，所以这里需要配置一个密码匹配对象 -->
  <!--userRealm.cachingEnabled：启用缓存，默认false；-->
  <!--userRealm.authenticationCachingEnabled：启用身份验证缓存，即缓存AuthenticationInfo信息，默认false；-->
  <!--userRealm.authenticationCacheName：缓存AuthenticationInfo信息的缓存名称；-->
  <!--userRealm. authorizationCachingEnabled：启用授权缓存，即缓存AuthorizationInfo信息，默认false；-->
  <!--userRealm. authorizationCacheName：缓存AuthorizationInfo信息的缓存名称；-->
  <bean id="shiroRealm" class="cn.everlook.myweb.shiro.realm.ShiroRealm">
    <property name="credentialsMatcher">
      <bean class="cn.everlook.myweb.commons.util.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="SHA-256"/>
        <property name="hashIterations" value="1024"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
      </bean>
    </property>
    <property name="cachingEnabled" value="true"/>
    <property name="cacheManager" ref="cacheManager"/>
    <!--<property name="authorizationCachingEnabled" value="true"/>-->
    <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    <!--<property name="authenticationCachingEnabled" value="true"/>-->
    <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
  </bean>

  <!--自定义LogoutFilter,退出-->
  <bean id="logoutFilter" class="cn.everlook.myweb.commons.filter.shiro.SystemLogoutFilter">
    <property name="redirectUrl" value="/login/toLogin.do"/>
  </bean>


  <!--loginFormAuthenticationFilter,登录-->
  <bean id="formAuthenticationFilter"
        class="cn.everlook.myweb.commons.filter.shiro.LoginFormAuthenticationFilter">
    <property name="usernameParam" value="loginName"/>
    <property name="passwordParam" value="pwd"/>
    <property name="rememberMeParam" value="rememberMe"/>
  </bean>


  <!-- Shiro生命周期处理器,用来管理在Spring容器中的Shiro常见的对象-->
  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

  <!-- AOP式方法级权限检查  -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor">
    <property name="proxyTargetClass" value="true"/>
  </bean>

  <!--启用Shiro注解-->
  <!-- 开启Shiro的注解，实现对Controller的方法级权限检查(如@RequiresRoles,@RequiresPermissions),
    需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证  -->
  <!--开启spring的显示代理（即cglib）,并将shiro的安全管理器交给spring管理。-->
  <aop:config proxy-target-class="true"/>
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <!--网络方面-->
  <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
  <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
  <!--shiroFilter这个bean得id必须与web.xml文件中的filter-name保持一致-->
  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

    <property name="filters">
      <map>
        <!--认证过滤器-->
        <entry key="authc" value-ref="formAuthenticationFilter"/>
        <!--退出过滤器-->
        <entry key="logout" value-ref="logoutFilter"/>
        <!--强制退出过滤器-->
        <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
      </map>
    </property>


    <!-- Shiro的核心安全接口,这个属性是必须的 -->
    <property name="securityManager" ref="securityManager"/>
    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->
    <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
    <property name="loginUrl" value="/login/login.do"/>

    <!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
    <!--<property name="successUrl" value="/themes/lf/pc/app/rbac/index.jsp"/>-->
    <!--<property name="successUrl" value="/login/index.do"/>-->

    <!-- 用户访问未对其授权的资源时,所显示的连接 -->
    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
    <property name="unauthorizedUrl" value="/error/403.jsp"/>


    <!--代表我们要完成的shiro过滤器的具体配置-->
    <!-- Shiro连接约束配置,即过滤链的定义 -->
    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
    <property name="filterChainDefinitions">
      <value>
        <!--加载静态资源-->
        /layuiadmin/** = anon
        /mustache/** = anon
        /layuiview/** = anon
        /tinymce/** = anon
        /nprogress/** = anon
        /jquery/** = anon
        /bootstrap/** = anon
        /fontawesome/** = anon
        /kartik/** = anon
        /error/** = anon
        /res/** = anon
        /vue/** = anon


        / =anon <!--这个代表不拦截首页的地址 -->
        /zt_index.jsp = anon
        /kaptcha = anon
        /druid = anon
        /login/toLogin.do = anon
        /error/404.jsp = anon
        <!--需要拦截的请求-->
        /login/login.do = kickout,authc
        <!--退出的请求-->
        /login/loginOut.do = logout
        /login/index.do = user
        /** = kickout,authc <!--这个代表拦截所有的请求和地址 -->

        <!--/sys/schedule.jsp=perms[sys:schedule:save]-->
        <!--/personInfo/personInfo.do = authc-->
        <!--/captcha.jpg=anon-->
        <!--/themes/lf/pc/app/rbac/admin.jsp = roles[admin]-->
        <!--/themes/lf/pc/app/rbac/user.jsp = roles[user]-->
        <!--/** = authc-->
      </value>
    </property>
  </bean>
</beans>

